@page "/"
@using DomainModels;
@using Service;
@inject MangaService MangaService
@inject NavigationManager Navigation

@if (mangaList == null)
{
    <p>Loading...</p>
}
else
{
    <ul class="manga-grid">
        @foreach (var manga in mangaList)
        {
            <li class="manga-item">
                <img src="https://mangareader-c0th.onrender.com/api/imageProxy?url=@Uri.EscapeDataString(manga.thumb)" alt="@manga.title" />
                <div class="manga-info">
                    <strong>@manga.title</strong>
                    <p class="description">@Truncate(manga.description, 100)</p>
                    <button class="read-more-btn" @onclick="() => NavigateToDetail(manga.title)">Read More</button>
                </div>
            </li>
        }
    </ul>

    <div class="pagination">
        <button @onclick="PreviousPage" disabled="@IsFirstPage">Previous</button>

        @foreach (var page in VisiblePages)
        {
            <button class="page-btn @(currentPage == page ? "active" : "")" @onclick="() => LoadPage(page)">
               
            </button>
        }

        <button @onclick="NextPage" disabled="@IsLastPage">Next</button>
    </div>
}

@code {
    private List<Manga> mangaList;
    private int currentPage = 1;
    private int totalPages = 2456; // dynamically from API ideally
    private int visiblePageCount = 10;

    protected override async Task OnInitializedAsync()
    {
        await LoadPage(currentPage);
    }

    private async Task LoadPage(int page)
    {
        if (page < 1 || page > totalPages) return;
        currentPage = page;
        mangaList = await MangaService.GetMangaListAsync(page);
    }

    private IEnumerable<int> VisiblePages
    {
        get
        {
            int start = Math.Max(1, currentPage - visiblePageCount / 2);
            int end = Math.Min(totalPages, start + visiblePageCount - 1);

            if (end - start + 1 < visiblePageCount)
                start = Math.Max(1, end - visiblePageCount + 1);

            return Enumerable.Range(start, end - start + 1);
        }
    }

    private void NextPage() => _ = LoadPage(currentPage + 1);
    private void PreviousPage() => _ = LoadPage(currentPage - 1);
    private bool IsFirstPage => currentPage == 1;
    private bool IsLastPage => currentPage == totalPages;

    private void NavigateToDetail(string title)
    {
        var encoded = Uri.EscapeDataString(title);
        Navigation.NavigateTo($"/manga/{encoded}");
    }

    private string Truncate(string text, int length)
    {
        if (string.IsNullOrWhiteSpace(text)) return "";
        return text.Length <= length ? text : text.Substring(0, length) + "...";
    }
}


<style>
    .manga-grid {
        display: flex;
        flex-wrap: wrap;
        gap: 20px;
        justify-content: center;
    }

    .manga-item {
        flex: 1 1 calc(50% - 20px);
        display: flex;
        background: #f9f9f9;
        padding: 10px;
        border-radius: 8px;
        box-shadow: 0 2px 6px rgb(0 0 0 / 0.1);
        align-items: flex-start;
        max-width: 500px;
        height: 170px; /* Match image height */
        overflow: hidden; /* Hide overflowing text */
    }

        .manga-item img {
            border-radius: 6px;
            margin-right: 15px;
            object-fit: cover;
            height: 170px;
            width: 100px;
        }

    .manga-info {
        flex: 1;
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        position: relative;
        overflow: hidden;
    }

        .manga-info strong {
            font-size: 1.2em;
            color: #222;
        }

        .manga-info small {
            color: #666;
            font-style: italic;
            margin-bottom: 6px;
        }

    .description {
    font-size: 0.95em;
    color: #444;
    line-height: 1.2em;
    max-height: 3.6em; /* about 3 lines */
    overflow: hidden;
    text-overflow: ellipsis;
    display: -webkit-box;
    -webkit-line-clamp: 3; /* show max 3 lines */
    -webkit-box-orient: vertical;
    white-space: normal;
    margin-bottom: 8px;
}


        .description.expanded {
            max-height: none;
            white-space: normal;
            overflow: visible;
        }

    .read-more-btn {
        background: none;
        border: none;
        color: #007bff;
        cursor: pointer;
        padding: 0;
        font-size: 0.9em;
        margin-top: auto;
        align-self: flex-start;
    }

</style>